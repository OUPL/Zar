
func concat (l1 : [int], l2 : [int]) -> [int] :
  destruct(l1, l2, \x:int. \xs:[int]. x :: concat(xs, l2))
func range (n : int) -> [int] :
  if n <= 0 then [] : [int] else concat(range(n-1), [n-1]:[int])

# Assumes the input is positive.
func even (x : int) -> bool :
  if x = 0 then true else if x < 0 then false else even(x-2)

# main:
#   y <- 0
#   x <~ flip(1/3)
#   while x:
#     x <~ flip(1/3)
#     y <~ uniform(range(8))
#     while y > 6:
#       y <~ uniform(range(8))
#       observe even(y)
#   return y


# main:
#   z <- 0
#   x <~ flip(1/3)
#   while x:
#     x <~ flip(1/3)
#     y <~ flip(1/3)
#     if y:
#       z <~ uniform(range(8))
#       while z > 6:
#         z <~ uniform(range(8))
#         observe even(z)
#   return z

main:
  x <~ flip(1/3)
  y <~ flip(1/3)
  z <~ flip(1/3)
  observe x | y | z
  return x