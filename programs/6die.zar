
func f(b : bool) -> int:
  if b then 1 else 0

# main:
#   i <- 8
#   while (i > 6):
#     a0 <~ flip(1/2)
#     a1 <~ flip(1/2)
#     a2 <~ flip(1/2)
#     i <- 4*f(a0) + 2*f(a1) + f(a2) + 1
#   return i = 4

# main:
#   a0 <~ flip(1/2)
#   a1 <~ flip(1/2)
#   a2 <~ flip(1/2)
#   i <- 4*f(a0) + 2*f(a1) + f(a2) + 1
#   observe 1 <= i & i <= 6
#   return i


func concat (l1 : [int], l2 : [int]) -> [int] :
  destruct(l1, l2, \x:int. \xs:[int]. x :: concat(xs, l2))
func range (n : int) -> [int] :
  if n <= 0 then [] : [int] else concat(range(n-1), [n-1]:[int])

dist pair (d1 : dist(int), d2 : dist(int)) -> dist((int, int)) :
  x <~ d1
  y <~ d2
  return (x, y)

dist die (n : int) -> int :
  x <~ uniform(range(n))
  return x

dist coin (p : rational) -> bool :
  b <~ flip(p)
  return b

dist test (d : dist(int)) -> int :
  x <- 3
  while x > 2:
    x <~ uniform(range(4))
    y <~ d
    observe x <= y
  return x

# dist test () -> int :
#   x <- 3
#   while x > 2:
#     x <~ uniform(range(4))
#     y <~ die(3)
#     # observe ~ (x = y)
#   return x

dist higher_order (f : dist(int) -> dist(int)) -> int :
  x <~ f(die(3))
  return x

dist int_list (d : dist(int), n : int) -> [int] :
  if n <= 0:
    return []:[int]
  else:
    x <~ d
    xs <~ int_list(d, n-1)
    return x :: xs

dist bool_list (d : dist(bool), n : int) -> [bool] :
  if n <= 0:
    return []:[bool]
  else:
    x <~ d
    xs <~ bool_list(d, n-1)
    return x :: xs

main:
  p <~ pair(die(6), die(6))
  return fst(p) + snd(p)

  # x <~ higher_order(test)
  # return x

  # d <- die(3)
  # x <~ d
  # y <~ d
  # return x

  # d <- coin(1/3)
  # x <~ d
  # y <~ d
  # return (x, y)

  # l <~ bool_list(coin(1/2), 2)
  # return l