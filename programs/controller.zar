# A PI controller

func head(l: [float]) -> float:
  destruct(l, 0.0, \x:float. \xs:[float]. x)

func tail(l: [float]) -> [float]:
  destruct(l, []:[float], \x:float. \xs:[float]. xs)

func sum(l: [float]) -> float:
  destruct(l, 0.0, \x:float. \xs:[float]. x + sum(xs))

func len(l: [float]) -> float:
  destruct(l, 0.0, \x:float. \xs:[float]. 1.0 + len(xs))

func map(f: float->float, l : [float]) -> [float] :
  destruct (l, []:[float], \x:float. \xs:[float]. f(x) :: map(f, xs))

func unifN_rec(n: float, eps:float, start:float) -> [float]:
  if n <= 0.0 then []:[float] else start :: unifN_rec(n-1.0, eps, start+eps)

func unifN(start: float, end: float, density: float) -> [float]:
  unifN_rec(density, (end-start)/density, start)
  
# A PI controller. vr is the setpoint velocity.
# Assumes len(vs) > 0  
func pi(vr: float, k: float, vs: [float]) -> float:
  k*((vr - head(vs)) + sum(map(\v:float. vr - v, vs))/len(vs))

# dv/dt in response to control signal u \in [0,1].
func plant(u: float) -> float:
  u

main:
  vr <- 0.5

  k  <~ uniform(unifN(0.0, 2.0, 20.0))

  i  <- 0
  v  <- 0.0
  vs <- [v]:[float]
  while i < 20:
    u  <- pi(vr, k, vs)
    dv <- plant(u)
    new_v <- dv + v
    #observe (i < 10 | 0.4 <= new_v & new_v <= 0.6)
    v <- new_v
    vs <- new_v :: vs
    i <- i + 1
  return (k = 0.2)
