# https://arxiv.org/pdf/1710.09951.pdf (pg. 38)

func head (l : [(int, int)]) -> (int, int) :
  destruct(l, (0-1, 0-1), \x:(int, int). \xs:[(int, int)]. x)

func tail (l : [(int, int)]) -> [(int, int)] :
  destruct(l, []:[(int, int)], \x:(int, int). \xs:[(int, int)]. xs)

func nth (l : [(int, int)], n : int) -> (int, int) :
  if n <= 0 then head(l) else nth(tail(l), n-1)

func size (l : [(int, int)]) -> int :
  destruct(l, 0, \x:(int, int). \xs:[(int, int)]. 1 + size(xs))

main:
    T <- 10
    # set up graph G
    V <- [0, 1, 2, 3, 4] : [int]
    E <- [(0, 2), (1, 2), (2, 3), (2, 4)] : [(int, int)]
    C <- [0, 1, 2, 3] : [int]
    # coloring map: -1 for no assigned color
    w <- [(0, 0-1), (1, 0-1), (2, 0-1), (3, 0-1)] : [(int, int)]

    i <- 0
    while i < T:
        # assume false for validity func.
        valid <- False
        v <~ uniform(V)
        c <~ uniform(C)

        # enum edges for color conflicts
        j <- 0
        while j < size(E):
            # dodgy way of pattern checking for matching v
            if fst(nth(E, j)) = v:
                k <- 0
                while k < size(w):
                    # if color does not conflict, then valid
                    if fst(nth(w, k)) = snd(nth(E, j)):
                        if ~(snd(nth(w, k)) = c):
                            valid <- true

                    k <- k + 1
                # end while
            else:
                if snd(nth(E, j)) = v:
                    k <- 0
                    while k < 4:
                        if fst(nth(w, k)) = fst(nth(E, j)):
                            if ~(snd(nth(w, k)) = c):
                                valid <- true

                        k <- k + 1
                    # end while
                # end if
            # end if-else

            j <- j + 1
        # end while

        if valid:
            j <- 0
            while j < 4:
                # change mapped color for v
                if fst(nth(w, j)) = v:
                    snd(nth(w, j)) <- c

                j <- j + 1
            # end while
        # end if

        i <- i + 1
    # end while
# end main
